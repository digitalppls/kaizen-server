import {Body, Controller, Get, HttpException, HttpStatus, Post, Req} from '@nestjs/common';
import {ApiBearerAuth, ApiConsumes, ApiOperation, ApiResponse, ApiTags} from "@nestjs/swagger";
import {Throttle} from "@nestjs/throttler";
import {LimitOrderService} from "src/token/limit-order/limit-order.service";
import {LimitOrder, LimitOrderDirection} from "src/token/limit-order/limit-order.schema";
import {Exceptions} from "src/enums/exceptions.enum";
import {RequestModel} from "src/auth/auth.middleware";

@ApiTags("ü™ô –¢–æ–∫–µ–Ω—ã üößÔ∏è –õ–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞")
@Controller('token/limit-order')
export class LimitOrderController {

    constructor(
        private readonly limitOrderService: LimitOrderService) {
    }

    @Get("list")
    @ApiBearerAuth()
    @ApiConsumes('application/x-www-form-urlencoded', 'application/json')
    @ApiOperation({summary: "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞", description: ""})
    @Throttle(2, 5)
    @ApiResponse({status: 201, type: [LimitOrder]})
    async list(@Req() request:RequestModel): Promise<LimitOrder[]> {
        return this.limitOrderService.list(request.userId);
    }

    
    // @ApiTags("üë®üèª‚Äçüíº –ê–¥–º–∏–Ω")
    @Get("list/all")
    @ApiBearerAuth()
    @ApiConsumes('application/x-www-form-urlencoded', 'application/json')
    @ApiOperation({summary: "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", description: ""})
    @Throttle(2, 5)
    @ApiResponse({status: 201, type: [LimitOrder]})
    async listAll(@Req() request:RequestModel): Promise<LimitOrder[]> {
        return this.limitOrderService.list();
    }

    @Post("sell/save")
    @ApiBearerAuth()
    @ApiConsumes('application/x-www-form-urlencoded', 'application/json')
    @ApiOperation({
        summary: "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ/–∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É",
        description: "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Å–ø–∏—Å–æ–∫ / –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω _id –Ω–∞ —Ä—è–¥—É —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ / –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–æ–ª—å–∫–æ _id"
    })
    @Throttle(2, 5)
    @ApiResponse({status: 201, type: [LimitOrder]})
    async sellSave(@Req() request:RequestModel, @Body() limitOrder: LimitOrder): Promise<LimitOrder[]> {
        if(limitOrder.direction && limitOrder.direction!==LimitOrderDirection.SELL) throw new HttpException(Exceptions.INCORRECT_TYPE, HttpStatus.NOT_ACCEPTABLE)
        await this.limitOrderService.save(request.userId, limitOrder);
        return this.limitOrderService.list(request.userId);
    }



    @ApiTags("üë®üèª‚Äçüíº –ê–¥–º–∏–Ω")
    @Post("buy/save")
    @ApiBearerAuth()
    @ApiConsumes('application/x-www-form-urlencoded', 'application/json')
    @ApiOperation({
        summary: "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ/–∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É (üë®üèª‚Äçüíº)",
        description: "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Å–ø–∏—Å–æ–∫ / –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω _id –Ω–∞ —Ä—è–¥—É —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ / –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–æ–ª—å–∫–æ _id"
    })
    @Throttle(2, 5)
    @ApiResponse({status: 201, type: [LimitOrder]})
    async buySave(@Req() request:RequestModel, @Body() limitOrder: LimitOrder): Promise<LimitOrder[]> {
        if(limitOrder.direction && limitOrder.direction!==LimitOrderDirection.BUY) throw new HttpException(Exceptions.INCORRECT_TYPE, HttpStatus.NOT_ACCEPTABLE)
        await this.limitOrderService.save(request.userId, limitOrder);
        return this.limitOrderService.list(request.userId);
    }


}
